name: Tests

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    
    services:
      mongodb:
        image: mongo:5.0
        # Não expor porta no host - usar rede interna do Docker
        # Acessível via hostname 'mongodb' na rede do container
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})' || mongo --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Verify MongoDB connection
      run: |
        echo "Waiting for MongoDB on internal network..."
        python -c "
        import time
        from pymongo import MongoClient
        from pymongo.errors import ConnectionFailure
        
        for i in range(1, 31):
            try:
                client = MongoClient('mongodb://mongodb:27017/', serverSelectionTimeoutMS=2000)
                client.admin.command('ping')
                print('✅ MongoDB is ready on mongodb:27017!')
                client.close()
                break
            except (ConnectionFailure, Exception) as e:
                print(f'Waiting for MongoDB... ({i}/30)')
                time.sleep(2)
                if i == 30:
                    print(f'❌ MongoDB connection failed: {e}')
                    exit(1)
        "
    
    - name: Create .env file for tests
      run: |
        cat > .env << EOF
        FLASK_ENV=testing
        FLASK_DEBUG=False
        SECRET_KEY=test_secret_key_for_github_actions_only
        MONGO_URI=mongodb://mongodb:27017/test_clientmanager
        MONGODB_URI=mongodb://mongodb:27017/test_clientmanager
        DATABASE_NAME=test_clientmanager
        EOF
        echo "✅ .env created for tests (using internal network: mongodb:27017)"
    
    - name: Initialize test database
      run: |
        python -c "
        import sys
        import os
        from dotenv import load_dotenv
        load_dotenv()
        
        # Verificar se MongoDB está acessível
        from pymongo import MongoClient
        try:
            client = MongoClient(os.getenv('MONGO_URI', 'mongodb://mongodb:27017/test_clientmanager'), serverSelectionTimeoutMS=5000)
            client.admin.command('ping')
            print('✅ MongoDB connection successful (mongodb:27017)')
            
            # Limpar banco de teste
            db_name = 'test_clientmanager'
            if db_name in client.list_database_names():
                client.drop_database(db_name)
                print(f'✅ Test database {db_name} cleaned')
            
            client.close()
        except Exception as e:
            print(f'❌ MongoDB connection failed: {e}')
            sys.exit(1)
        "
    
    - name: Run linting
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=100
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
      continue-on-error: true
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
      env:
        FLASK_ENV: testing
        MONGO_URI: mongodb://mongodb:27017/test_clientmanager
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true
    
    - name: Cleanup test database
      if: always()
      run: |
        python -c "
        from pymongo import MongoClient
        try:
            client = MongoClient('mongodb://mongodb:27017/', serverSelectionTimeoutMS=5000)
            client.drop_database('test_clientmanager')
            print('✅ Test database cleaned up')
            client.close()
        except Exception as e:
            print(f'⚠️ Cleanup warning: {e}')
        "

